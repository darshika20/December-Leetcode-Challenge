/**
* author: Darshika
* Question Link: https://leetcode.com/problems/insertion-sort-list/
* Time Complexity : O(n^2)
* Space Complexity : O(1)
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode insertionSortList(ListNode head) {//4 -> 2 -> 1 -> 3
        ListNode dummy = new ListNode(Integer.MIN_VALUE);//-1
        dummy.next = head;// -1 -> 4 -> 2 -> 1 -> 3
        ListNode prev = dummy;// -1
        ListNode cur = head;//4
        while(cur!=null){//4
            if(cur.next!=null && cur.val > cur.next.val){
                
                while(prev.next!=null && prev.next.val <= cur.next.val){//4<=2 x
                    prev = prev.next;
                }
                ListNode temp = prev.next;//4
                prev.next = cur.next;//-1 -> 2 -> 1 -> 3
                cur.next = cur.next.next; // 4 -> 1 ->3
                prev.next.next = temp;// -1 -> 2 -> 4 -> 1 -> 3
                prev = dummy;//-1
                cur = prev.next.next;
            }else{
                cur = cur.next;//1                
            }
        }
        return dummy.next;
    }
}
