/**
* author: Darshika
* Question Link: https://leetcode.com/problems/merge-intervals/
* Time Complexity: O(nlogn) n-length of intervals
* Space Complexity: O(n)
*/

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a,b) -> a[0]==b[0] ? a[1] - b[1] : a[0]-b[0]);
        int start = intervals[0][0];
        int end = intervals[0][1];
        List<int[]> intv = new ArrayList<>();
        for(int i = 1;i<intervals.length;i++){
            if(end >= intervals[i][0]){
                end = Math.max(end,intervals[i][1]);
            }else{
                int[] temp = new int[2];
                temp[0] = start;
                temp[1] = end;
                intv.add(temp);
                start = intervals[i][0];
                end = intervals[i][1];
            }
        }
        int[] temp = new int[2];
        temp[0] = start;
        temp[1] = end;
        intv.add(temp);
        
        return intv.toArray(new int[0][]);
        
    }
}
