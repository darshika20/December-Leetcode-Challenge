/**
* author: Darshika
* Question Link: https://leetcode.com/problems/k-closest-points-to-origin/
* Time Complexity: O(nlogk)
* Space Complexity: O(n)
*/

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((p1, p2) -> p2[0] * p2[0] + p2[1] * p2[1] - p1[0] * p1[0] - p1[1] * p1[1]);
        for(int[] point : points){
            pq.add(point);
            if(pq.size() > k){
                pq.poll();
            }
        }
        int[][] distMap = new int[k][2];
        int i = 0;
        while(pq.size()>0){
            int[] temp = pq.poll();
            distMap[i++] = temp;
        }
        return distMap;
    }
}
